@using System.Security.Claims
@implements IDisposable
@inject ApplicationState AppState
@inject NavigationManager NavigationManager
@inject IPageRepository PageRepository
@inject AuthenticationStateProvider AuthZ
@inject IUserRepository UserRepository
@inject ApplicationState AppState



<nav class="navbar navbar-expand-lg navbar-light" id="mainNav">
	<div class="container px-4 px-lg-5">
		<a class="navbar-brand" href="/">@AppState.SiteName</a>
		<button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
			Menu
			<i class="fas fa-bars"></i>
		</button>
		<div class="collapse navbar-collapse" id="navbarResponsive">
			<ul class="navbar-nav ms-auto py-4 py-lg-0">
				<li class="nav-item"><a class="nav-link px-lg-3 py-3 py-lg-4" href="/">@SharedResource.sharpsite_home</a></li>
				@foreach (var p in Pages)
				{
					<li class="nav-item"><a class="nav-link px-lg-3 py-3 py-lg-4" href="@($"/{p.Slug}")">@p.Title</a></li>
				}
			</ul>
		</div>
	</div>
</nav>

<!--  NEW UI ABOVE -->

@*
		<hr class="dropdown-divider" />


		<AuthorizeView>
			<div class="nav-item px-3">
				<NavLink class="nav-link" aria-label="Manage Profile" href="Account/Manage">
					<span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @user?.DisplayName
				</NavLink>
			</div>
		</AuthorizeView>

		<AuthorizeView Roles="@Constants.Roles.AllUsers">
			<div class="nav-item px-3">
				<NavLink class="nav-link" href="/admin" Match="NavLinkMatch.All">
					<span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @Localizer[SharedResource.sharpsite_admin]
				</NavLink>
			</div>
		</AuthorizeView>

		<div class="nav-item px-3">
			<NavLink class="nav-link" href="/aboutSharpSite" Match="NavLinkMatch.All">
				<span class="bi bi-house-door-fill" aria-hidden="true"></span>@Localizer[SharedResource.sharpsite_about]
			</NavLink>
		</div>


		<div class="nav-item px-3">
			<AuthorizeView>
				<Authorized>
					<form action="Account/Logout" method="post">
						<AntiforgeryToken />
						<input type="hidden" name="ReturnUrl" value="@currentUrl" />
						<button type="submit" class="nav-link" aria-label="Logout">
							<span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> @Localizer[SharedResource.sharpsite_logout]
						</button>
					</form>
				</Authorized>
				<NotAuthorized>
					<NavLink class="nav-link" href="/Account/Login" Match="NavLinkMatch.All">
						<span class="bi bi-house-door-fill" aria-hidden="true"></span> @Localizer[SharedResource.sharpsite_login]
					</NavLink>
				</NotAuthorized>
			</AuthorizeView>

		</div>

		<LanguagePicker />
	</div>
</div>
*@

@code {

	IEnumerable<Page> Pages { get; set; } = Enumerable.Empty<Page>();
	private string? currentUrl;

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;
	private SharpSiteUser user = default!;

	private string Logo => string.IsNullOrEmpty(AppState.HasCustomLogo) ? "/img/logo.webp" : Path.Combine(RouteValues.BaseFileApi,"/",AppState.HasCustomLogo);

	protected override async Task OnInitializedAsync()
	{
		Pages = await PageRepository.GetPages();
		currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		NavigationManager.LocationChanged += OnLocationChanged;

		var authState = await AuthZ.GetAuthenticationStateAsync();
		if (authState?.User.Identity is ClaimsIdentity identity)
		{
			this.user = await UserRepository.GetUserAsync(authState.User);
		}

	}

	private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
	{
		currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
		StateHasChanged();
	}

	public void Dispose()
	{
		NavigationManager.LocationChanged -= OnLocationChanged;
	}

}
